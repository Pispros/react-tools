#!/bin/bash

option=$1
element_name=$2 # Component name passed as first parameter while calling the script* // First parameter
another_name=$3 # Second parameter


############################################ Utility options

_showOptions()
{
	echo
	echo "----------------------- HELP -------------------------"
	echo
	echo "synthax : react-ninjamer-tools <option> <element_name> [<element_name>]"
	echo
	echo
	echo "Attention : Make sure you are in your root folder and you do not have unsaved code a file you want to touch with the tool !"
	echo
	echo "------------------------------------------- Options : "
	echo
	echo "--init ----------> without any other parameter to init ninjamer-tools in your project ! It comes with react-redux structure"
	echo
	echo "-c ----------> generate a component."
	echo
	echo "-r ----------> generate a reducer."
	echo
	echo "-p ----------> generate a page."
	echo
	echo "-const ----------> generate a constant file" 
	echo
	echo "-a ----------> generate an actions file" 
	echo
	echo "-i ----------> import component in a page.[... -i component_name page_name]" 
	echo
}

_initTools()
{
	cd src
	
	_testIfFileExistInInit "components"

	result="$?"

	if [[ $result == 0 ]] 
	then
		pwd
		mkdir components
	fi

	_testIfFileExistInInit "pages"

	result="$?"

	if [[ $result == 0 ]] 
	then
		mkdir pages
	fi

	# _testIfFileExistInInit "services"

	# result="$?"

	# if [[ $result == 0 ]] 
	# then
	# 	mkdir services
	# fi

	_testIfFileExistInInit "constants"

	result="$?"

	if [[ $result == 0 ]] 
	then
		mkdir constants
	fi

	_testIfFileExistInInit "actions"

	result="$?"

	if [[ $result == 0 ]] 
	then
		mkdir actions
	fi

	_testIfFileExistInInit "reducers"

	result="$?"

	if [[ $result == 0 ]] 
	then
		mkdir reducers
	fi

	sudo npm install --save sass
	sudo npm install --save redux
	sudo npm install --save react-redux
	sudo npm install --save redux-thunk

	sudo cp -f ~/.reactComponentSample/reactComponentSample/index.js .

	sudo cp -f ~/.reactComponentSample/reactComponentSample/reducersIndex.js ./reducers/index.js

	echo "--------------------------------------"
	echo "react-ninjamer-tools working properly with redux logic"
	echo "--------------------------------------"
}

_testIfFileExist()
{
	if [[ $2 == "components" ]] 
	then
		cd src/components
	fi

	if [[ $2 == "pages" ]] 
	then
		cd src/pages
	fi

	if [[ $2 == "actions" ]] 
	then
		cd src/actions
	fi

	if [[ $2 == "constans" ]] 
	then
		cd src/constants
	fi

	if [[ $2 == "reducers" ]] 
	then
		pwd
		cd src/reducers
	fi

	filelist=`ls`
	for filename in $filelist 
	do
		if [[ $1 == $filename ]]
		then
			cd ..
			cd ..
			return 1
		fi
	done
	cd .. 
	cd ..
	return 0
}

_testIfFileExistInInit()
{
	filelist=`ls`
	for filename in $filelist 
	do
		if [[ $1 == $filename ]]
		then
			return 1
		fi
	done
	
	return 0
}

######################################################### Components Section

_makeComponent()
{
	cd src/components

	component_name=$1
	mkdir $component_name

	cd $component_name

	echo
	echo "Do you want to import it in a page ? [Y]es or [N]o"
	echo
	read response

	if [[ $response == 'Y' ]] 
	then
		echo 
		echo 'Page name ?'
		echo
		read page_name
		_importComponentInPageF "$component_name" "$page_name"
	fi

	echo
	echo "Do you want to connect to the store (redux) ? [Y]es or [N]o"
	echo
	read response

	if [[ $response == 'Y' ]] 
	then
		cp ~/.reactComponentSample/reactComponentSample/sample.connected.js ${component_name}'.js'

		cp ~/.reactComponentSample/sample.scss ${component_name}'.scss'

		if [[ "$OSTYPE" == "linux-gnu"* ]]
		then
			sed -i 's/sample/'${component_name}'/' ${component_name}'.js'

			sed -i 's/sample/'${component_name}'/' ${component_name}'.scss'
		else
			if [[ "$OSTYPE" == "darwin"* ]]
			then
			sed -i '' 's/sample/'${component_name}'/' ${component_name}'.js'

			sed -i '' 's/sample/'${component_name}'/' ${component_name}'.scss'
			fi
		fi

		
		
	else
		cp ~/.reactComponentSample/sample.js ${component_name}'.js'

		cp ~/.reactComponentSample/sample.scss ${component_name}'.scss'

		if [[ "$OSTYPE" == "linux-gnu"* ]]
		then
			sed -i 's/sample/'${component_name}'/' ${component_name}'.js'

			sed -i 's/sample/'${component_name}'/' ${component_name}'.scss'
		else
			if [[ "$OSTYPE" == "darwin"* ]]
			then
			sed -i '' 's/sample/'${component_name}'/' ${component_name}'.js'

			sed -i '' 's/sample/'${component_name}'/' ${component_name}'.scss'
			fi
		fi

	fi

	echo "--------------------------------"
	echo "Component generated successfully"
	echo "--------------------------------"

	cd ..
}

_generateComponent()
{
	component_name=$1

	path="components"

	if [[ -z $component_name ]] 
		then
			echo 
			echo "----> Missing component name"
			echo
		else
			_testIfFileExist "$component_name" "$path"

			doFileExist=$?

			if [[ $doFileExist -eq 1 ]]
			then
				echo "Component already generated. Do you want to overwrite it ? Y(es)/N(o)"

				read response

				if [[ $response == 'Y' ]]
					 then
					 	cd src/components

						rm -r ${component_name}

						cd .. 
						cd ..

						_makeComponent "$component_name"

						return
					 else

					 	echo "*********************************"
						echo "Component not overwritten"
						echo "*********************************"

						return
				fi

			
			fi

			_makeComponent "$component_name"

	fi
	

	
}


######################################################### Pages Section

_makePage()
{
	cd src/pages

	page_name=$1
	mkdir $page_name

	cd $page_name

	echo
	echo "Do you want to connect to the store (redux) ? [Y]es or [N]o"
	echo
	read response

	if [[ $response == 'Y' ]] 
	then
		cp ~/.reactComponentSample/reactComponentSample/sample.connected.js ${page_name}'.js'

		cp ~/.reactComponentSample/sample.scss ${page_name}'.scss'

		if [[ "$OSTYPE" == "linux-gnu"* ]]
		then
			sed -i 's/sample/'${page_name}'/' ${page_name}'.js'

			sed -i 's/sample/'${page_name}'/' ${page_name}'.scss'
		else
			if [[ "$OSTYPE" == "darwin"* ]]
			then
			sed -i '' 's/sample/'${page_name}'/' ${page_name}'.js'

			sed -i '' 's/sample/'${page_name}'/' ${page_name}'.scss'
			fi
		fi
		
	else
		cp ~/.reactComponentSample/sample.js ${page_name}'.js'

		cp ~/.reactComponentSample/sample.scss ${page_name}'.scss'

		if [[ "$OSTYPE" == "linux-gnu"* ]]
		then
			sed -i 's/sample/'${page_name}'/' ${page_name}'.js'

			sed -i 's/sample/'${page_name}'/' ${page_name}'.scss'
		else
			if [[ "$OSTYPE" == "darwin"* ]]
			then
			sed -i '' 's/sample/'${page_name}'/' ${page_name}'.js'

			sed -i '' 's/sample/'${page_name}'/' ${page_name}'.scss'
			fi
		fi
	fi

	echo "--------------------------------"
	echo "Page generated successfully"
	echo "--------------------------------"

	cd ..

	cd ..

	if [[ "$OSTYPE" == "linux-gnu"* ]]
	then
		sed -i '1 a import '${page_name}' from "./pages/'${page_name}'/'${page_name}'"' App.js # import new component in app.js
	else
		if [[ "$OSTYPE" == "darwin"* ]]
		then
			sed -i '' '1 a import '${page_name}' from "./pages/'${page_name}'/'${page_name}'"' App.js # import new component in app.js
		fi
	fi

	cd ..
}



_generatePage()
{
	page_name=$1

	path="pages"

	if [[ -z "$page_name" ]]
	then
		echo
		echo "----> Missing page name"
		echo
	else
		_testIfFileExist "$page_name" "$path"
		

		doFileExist=$?

		if [[ $doFileExist -eq 1 ]]
		then
			echo "Page already generated. Do you want to overwrite it ? Y(es)/N(o)"

			read response

			if [[ $response == 'Y' ]]
				 then
				 	cd src/pages

					rm -r ${page_name}

					cd .. 
					cd ..

					_makePage "$page_name"

					

					return
				 else

				 	echo "*********************************"
					echo "Page not overwritten"
					echo "*********************************"

					return
			fi

			
		fi

		_makePage "$page_name"
	fi
}

######################################################### Imports Section


_importComponentInPageF()
{

	component_name="$1"

	page_name="$2"

	if [[ -z $component_name || -z $page_name ]] 
		then
			echo "missing Argument(s)"
		else
			
			cd ../

			ls

			if [[ "$OSTYPE" == "linux-gnu"* ]]
			then
				sed -i '1 a import '${component_name}' from "../../components/'${component_name}'/'${component_name}'";' ../pages/${page_name}/${page_name}.js
			else
				if [[ "$OSTYPE" == "darwin"* ]]
				then
					sed -i '' '1 a import '${component_name}' from "../../components/'${component_name}'/'${component_name}'";' ../pages/${page_name}/${page_name}.js
				fi
			fi


			cd ..

			cd ..
	fi
}

_importComponentInPage()
{

	component_name="$1"

	page_name="$2"

	if [[ -z $component_name || -z $page_name ]] 
		then
			echo "missing Argument(s)"
		else
			
			cd src/components

			ls

			if [[ "$OSTYPE" == "linux-gnu"* ]]
			then
				sed -i '1 a import '${component_name}' from "../../components/'${component_name}'/'${component_name}'";' ../pages/${page_name}/${page_name}.js
			else
				if [[ "$OSTYPE" == "darwin"* ]]
				then
					sed -i '' '1 a import '${component_name}' from "../../components/'${component_name}'/'${component_name}'";' ../pages/${page_name}/${page_name}.js
				fi
			fi

			cd ..

			cd ..
	fi
}

######################################################### Constants Section

_generateConstant()
{
	cd src/constants

	constant_file_name="$1"

	_testIfFileExist "${constant_file_name}.types.js" "constants"

	doFileExist=$?

	if [[ $doFileExist -eq 1 ]]
	then
		echo "Constants file already generated. Do you want to overwrite it ? Y(es)/N(o)"

		read response

		if [[ $response == 'Y' ]]
			 then

			 	cd src/constants

				rm -r ${constant_file_name}.types.js

				touch $constant_file_name.types.js 

				cd ..
				cd ..

				return
			 else

			 	echo "*********************************"
				echo "Constants file not overwritten"
				echo "*********************************"

				return
		fi

	else
		cd src/constants
		touch $constant_file_name.types.js 
		cd ..
		cd ..
	fi
}

######################################################### Actions Section

_makeAction()
{
	cd src/actions

	action_file_name=$1
	
	cp ~/.reactComponentSample/reactComponentSample/sample.actions.js ${action_file_name}'.actions.js'

	if [[ "$OSTYPE" == "linux-gnu"* ]]
	then
		 sed -i 's/sample/'${action_file_name}'/' ${action_file_name}'.actions.js'
	else
		if [[ "$OSTYPE" == "darwin"* ]]
		then
			sed -i '' 's/sample/'${action_file_name}'/' ${action_file_name}'.actions.js'
		fi
	fi


	echo "--------------------------------"
	echo "Actions File generated successfully"
	echo "--------------------------------"

	cd ..
	cd ..
}

_generateAction()
{
	action_file_name="$1"

	cd src/actions

	if [[ -z $action_file_name ]] 
		then
			echo 
			echo "----> Missing actions file name"
			echo
		else
			_testIfFileExist "${action_file_name}.actions.js" "actions"

			doFileExist=$?

			if [[ $doFileExist -eq 1 ]]
			then
				echo "Actions files already generated. Do you want to overwrite it ? Y(es)/N(o)"

				read response

				if [[ $response == 'Y' ]]
					 then

					 	cd src/actions

						rm -r ${action_file_name}.actions.js

						_makeAction "$action_file_name"

						cd ..
						cd ..

						return
					 else

					 	echo "*********************************"
						echo "Actions files not overwritten"
						echo "*********************************"

						return
				fi

			
			fi

			_makeAction "$action_file_name"

	fi

	cd ..
	cd ..
}

######################################################### Reducers Section

_generateReducer()
{
	reducer_file_name="$1"

	if [[ -z $reducer_file_name ]] 
		then
			echo 
			echo "----> Missing reducer file name"
			echo
		else
			_testIfFileExist "${reducer_file_name}.reducer.js" "reducers"

			doFileExist=$?

			if [[ $doFileExist -eq 1 ]]
			then
				echo "Reducers file already generated. Do you want to overwrite it ? Y(es)/N(o)"

				read response

				if [[ $response == 'Y' ]]
					 then

					 	cd src/reducers

						rm -r ${reducer_file_name}.reducer.js

						touch "${reducer_file_name}.reducer.js"

						echo "import * as ${reducer_file_name}Types from '../constants/${reducer_file_name}.types.js'" | tee ${reducer_file_name}.reducer.js


						cd ..
						cd ..

						return
					 else

					 	echo "*********************************"
						echo "Reducers file not overwritten"
						echo "*********************************"

						return
				fi
			
			fi

			cd src/reducers

			touch "${reducer_file_name}.reducer.js"

			echo "import * as ${reducer_file_name}Types from '../constants/${reducer_file_name}.types.js'" | tee ${reducer_file_name}.reducer.js

	fi

	cd ..
	cd ..
}


#echo $component_name

####################### Menu

case $option in

	--init) _initTools ;;

	--help) _showOptions ;;

	-c) _generateComponent "$element_name" ;;

	-p) _generatePage "$element_name" ;;

	-i) _importComponentInPage "$element_name" "$another_name";;

	-const) _generateConstant "$element_name" ;;

	-a) _generateAction "$element_name" ;;

	-r) _generateReducer "$element_name";;
	
	*) _showOptions ;;
esac






